싱글톤 패턴 (Singleton Pattern)
특정 클래스의 인스턴스가 어플리케이션 전체에서 하나만 생성되도록 보장합니다. 
예를 들어 게임 매니저나 리소스 매니저 등에서 사용됩니다.

게임 오브젝트 풀링 (Object Pooling)
미리 생성해 놓은 객체들을 풀에 저장해두고, 필요할 때마다 가져와 사용하는 방식으로, 
객체 생성/소멸에 따른 성능 오버헤드를 줄일 수 있습니다.

상태 패턴 (State Pattern)
객체의 상태에 따라 행동이 달라지도록 설계하는 패턴으로, 게임 캐릭터의 상태 (이동, 공격, 대기 등) 관리에 자주 사용됩니다.

컴포지트 패턴 (Composite Pattern)
객체들을 트리 구조로 구성하여 개별 객체와 복합 객체를 동일하게 다룰 수 있도록 합니다. 
예를 들어 게임에서 씬을 구성하는 오브젝트들을 관리하는 데 사용될 수 있습니다.

옵저버 패턴 (Observer Pattern)
객체의 상태 변화를 관찰하는 다른 객체들에게 알려주는 패턴으로, 이벤트 처리나 UI 업데이트에 사용됩니다.

커맨드 패턴 (Command Pattern)
특정 동작을 객체로 캡슐화하여 실행할 수 있게 만들고, 실행 취소, 재실행 등의 기능을 지원하는 패턴입니다. 
게임에서 키 입력이나 UI 버튼 등의 입력 처리에 활용됩니다.

프록시 패턴 (Proxy Pattern)
다른 객체에 대한 접근을 제어하거나 중간에 처리를 추가할 때 사용됩니다. 
예를 들어 리소스 로딩의 지연 로딩이나 보안 검사 등에 활용됩니다.

플라이웨이트 패턴 (Flyweight Pattern)
메모리 공간을 절약하기 위해 공유 가능한 객체를 사용하여 많은 수의 유사한 객체를 처리할 때 사용됩니다. 
예를 들어 게임에서 많은 수의 동일한 객체를 생성할 때 활용됩니다.

전략 패턴 (Strategy Pattern)
알고리즘을 캡슐화하고 교체 가능하도록 만들어서, 실행 중에 알고리즘을 변경할 수 있게 합니다. 
예를 들어 게임에서 적의 AI 행동 패턴을 변경할 때 사용됩니다.

